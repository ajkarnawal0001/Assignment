
ques: Odd subset

short explanation:

we have given the length of the string and string of integer as a input and have to find subset which has sum is odd 
you can find by using two function the first funcion is to find the all subset and pass subset in second function 
to find the odd sum.


long explanation:
in this first we should take input and devide as new line and convert the length and string in array by spliting and 
now you can eaisly find the all the subset by recursion with backtracking by make funtion pass array, length, index(that is 0 init)
and newArray(that is empty array to returning the subset), in findSubSet funtion write basecase to stup the execution on index is equal
to length and return the function and in another cases loop till length and push the array with index and return the same findSubSet 
function and pop the value to change the options and print the subset in newArry and pass that newArray in another function to find odd count
take global variable count and in function check the sum of subset is odd by looping and if odd increase the count and prinf=t the count.


ALGO:
   function genAllSub(arr,N,index,newArr){
       if(newArr!=="")
        checkOdd(newArr)
       
       if(index==N)
           return
       
       for(i=index;i<N;i++){
           newArr.add(arr[i])
           genAllSub(arr,N,i+1,newArr)
           newArr.remove() //remove the last element
       }
       return
   }
